{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Button/Button.module.css","components/ContactForm/ContactForm.module.css","components/Message/Message.module.css","components/PageHeading/PageHeading.module.css","views/HomePage/HomePage.module.css","components/Filter /Filter.module.css","components/PageHeading/PageHeading.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactList/ContactList.js","components/Message/Message.js","components/ContactForm/ContactForm.js","components/Filter /Filter.js","views/HomePage/HomePage.js"],"names":["module","exports","PageHeading","text","className","styles","title","fetchContactsRequest","actions","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","axios","defaults","baseURL","dispatch","a","get","data","message","name","number","contact","post","contactId","delete","then","catch","error","getFilter","state","contacts","filter","getAllContacts","items","getTotalContactCount","createSelector","length","getLoading","loading","getvisibleContacts","console","log","normalizedFilter","toLowerCase","includes","connect","contactsSelectors","onDelete","id","contactsOperations","Container","TransitionGroup","component","s","List","map","CSSTransition","classNames","timeout","b","Button","type","onClick","Message","StyleMessage","in","appear","unmountOnExit","ContactForm","errorMessage","event","setState","setTimeout","handleInputChange","currentTarget","value","handleSubmit","preventDefault","props","onSubmit","trim","find","item","this","Form","q","Input","placeholder","onChange","Component","contactsActions","changeFilter","target","HomePage","resetError","fetchContacts","stylesHomePage","onSubmitContact","onResetError","StyleFilter","isloadingContacts","defaultProps"],"mappings":"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","file":"static/js/home-view.d587e96d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"ContactList_List__20gyh\",\"enter\":\"ContactList_enter__1Tfxs\",\"enterActive\":\"ContactList_enterActive__BPn6N\",\"exit\":\"ContactList_exit__3MW4R\",\"exitActive\":\"ContactList_exitActive__ZA3FS\",\"contact\":\"ContactList_contact__3ZIyH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__3R1xi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"ContactForm_Container__2jrAg\",\"Input\":\"ContactForm_Input__HKadG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__kVpdt\",\"enter\":\"Message_enter__3aW7_\",\"enterActive\":\"Message_enterActive__3ngpY\",\"exit\":\"Message_exit__Ynmld\",\"exitActive\":\"Message_exitActive__10mkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"PageHeading_title__1ffyz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"HomePage_appear___4y8l\",\"appearActive\":\"HomePage_appearActive__38yCa\",\"position\":\"HomePage_position__3J9te\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"Filter_enter__29y5T\",\"enterActive\":\"Filter_enterActive__1ekdR\",\"exit\":\"Filter_exit__2A3T0\",\"exitActive\":\"Filter_exitActive__1YnI6\"};","import styles from './PageHeading.module.css';\n\nexport default function PageHeading({ text }) {\n  return  <h1 className={styles.title}>{text}</h1>\n  ;\n}","import axios from \"axios\";\nimport actions from './contacts-actions';\n\nconst { fetchContactsRequest,\n    fetchContactsSuccess,\n    fetchContactsError,\n    addContactRequest,\n    addContactSuccess,\n    addContactError,\n    deleteContactRequest,\n    deleteContactSuccess,\n    deleteContactError\n} = actions;\n\naxios.defaults.baseURL = 'http://localhost:4040';\n\nconst fetchContacts = () => async dispatch => {\n    dispatch(fetchContactsRequest());\n\n    try {\n        const { data } = await axios.get('/contacts');\n        dispatch(fetchContactsSuccess(data));\n    } catch( error ) {\n        dispatch(fetchContactsError(error.message));\n    }\n};\n\nconst addContact = (name, number) => async dispatch => {\n    \n    const contact = {\n        name,\n        number       \n    };\n\n    dispatch(addContactRequest());\n\n    try {\n        const { data } = await axios.post('/contacts', contact);\n        dispatch(addContactSuccess(data));\n    } catch (error) {\n         dispatch(addContactError(error.message))\n    }\n    // axios.post('/contacts', contact)\n    //     .then(({ data} ) => dispatch(addContactSuccess(data)))\n    //     .catch(error => dispatch(addContactError(error.message)));\n};\n\nconst deleteContact = contactId => dispatch => {\n\n    dispatch(deleteContactRequest());\n\n    axios.delete(`/contacts/${contactId}`)\n        .then(() => dispatch(deleteContactSuccess(contactId)))\n        .catch(error => dispatch(deleteContactError(error.message)));\n};\n\nexport default {\n    fetchContacts,\n    addContact,\n    deleteContact\n};","import { createSelector } from \"reselect\";\n\nconst getLoading = state => state.contacts.loading;\nconst getFilter = state => state.contacts.filter;\nconst getAllContacts = state => state.contacts.items;\n\nconst getTotalContactCount = createSelector (\n    [getAllContacts],\n    // const contacts = getAllContacts(state);\n    (contacts)=>{\n    return contacts.length;}\n);\nconst getvisibleContacts = createSelector(\n    [getAllContacts, getFilter],\n\n    (contacts, filter) => {\n        console.log(\"filter\");\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n        name.toLowerCase().includes(normalizedFilter),\n    );\n    },    \n);\n\n\nexport default {\n    getLoading,\n    getFilter,\n    getvisibleContacts,\n    getTotalContactCount,\n    getAllContacts,\n}","import React from 'react';\nimport s from \"./ContactList.module.css\";\nimport b from '../Button/Button.module.css';\nimport Container from \"../Container\";\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport { connect } from 'react-redux';\nimport {contactsSelectors, contactsOperations} from '../../redux/contacts/';\n\nconst ContactList = ({ contacts, onDelete}) =>(\n    \n    <Container>\n   \n                  <TransitionGroup component=\"ul\" className={s.List} >\n              \n            {contacts.map(({ id, name, number }) =>\n                <CSSTransition key={id} classNames={s} timeout={250}>\n                <li className={s.contact} key={id} ><span>{name}: {number} </span>\n                  <button className={b.Button} type=\"button\" onClick={() => onDelete(id)} >Delete</button>\n                </li>\n                 </CSSTransition>\n            )}           \n           \n            </TransitionGroup>\n          \n             \n  </Container>);\n \nconst mapStateToProps = (state) => ({\n contacts:contactsSelectors.getvisibleContacts(state),\n \n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDelete: id =>dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList); ","import React from 'react';\nimport styles from './Message.module.css';\nimport {CSSTransition} from \"react-transition-group\";\nimport StyleMessage from '../../components/Message/Message.module.css'; \nimport PropTypes from 'prop-types';\n\nconst Message=({ message }) =>{\n  return (\n  <CSSTransition classNames={StyleMessage}  in={message} appear  timeout={250} unmountOnExit>\n  <div className={styles.message}><p >{message}</p></div> \n    </CSSTransition>  \n  )\n}\n \n Message.propTypes={\n   message:PropTypes.string,\n   };\n \n export default Message;","\nimport React, { Component } from 'react';\nimport Container from \"../Container\";\nimport b from \"../Button/Button.module.css\";\nimport s from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport q from '../ContactList/ContactList.module.css';\nimport Message from '../../components/Message';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nclass ContactForm extends Component {\n\n  static propTypes = {\n   contacts:PropTypes.arrayOf(PropTypes.object),\n   onSubmit:PropTypes.func,\n  }\n\n    state = {\n        name: '',\n        number: '',\n        message:null,\n    }\n\nerrorMessage=(event)=>{\n    this.setState({message:event});\n    setTimeout(() => {\n      this.setState({message:null})  \n    }, 2500);\n}\n\n    handleInputChange = event => {\n        const {name, value}= event.currentTarget;\n        this.setState({[name]:value})\n    };\n    \n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        const {name,number}=this.state;\n        const {onSubmit, contacts}=this.props;\n\n        if (name.trim() ===''){\n            this.errorMessage('Введите имя контакта')\n        return;\n        }          \n       if(number.trim() ===''  ){\n            this.errorMessage('Введите номер контакта')\n        return;\n         }\n        if (contacts.find( item => item.name.toLowerCase() === name.toLowerCase())){\n           this.errorMessage('Контакт существует')\n        return;  \n        }\n         onSubmit(name, number);\n\n         this.setState({\n            name: '',\n            number: ''\n        })\n    };\n    \n    \n    render(){ \n    \n        const { name, number,message } = this.state;\n\n        return (\n            \n        <Container>\n          \n          <Message message={message}/>\n        \n            <form className={s.Form} onSubmit={this.handleSubmit}>\n                <label className={q.contact}>\n                  Name <br/> <input className={s.Input} type=\"text\" name=\"name\" value={name}  placeholder='Name Surname' onChange={this.handleInputChange }/>\n                </label>\n                <br/>\n                <label className={q.contact}>\n                  Number <br/> <input className={s.Input} type=\"tel\" name=\"number\" value={number} placeholder='+38 ( 000 ) 000 - 00 - 00' onChange={this.handleInputChange}/>\n                </label>\n                <br/>\n                <button className={b.Button} type='submit'>Add contact</button>\n       \n            </form>\n            \n       </Container>\n        )\n    }      \n};\n const mapStateToProps = (state) => ({\n contacts: contactsSelectors.getAllContacts(state),\n});\nconst mapDispatchToProps = dispatch => ({\n\n    onSubmit:  (name,number) => dispatch(contactsOperations.addContact(name,number)),\n})\n\nexport default connect( mapStateToProps,mapDispatchToProps)(ContactForm);\n","import React from 'react';\nimport Container from \"../Container\";\nimport { connect } from \"react-redux\";\nimport s from \"../ContactForm/ContactForm.module.css\";\nimport q from '../ContactList/ContactList.module.css';\nimport { contactsSelectors,contactsActions } from '../../redux/contacts';\n\nconst Filter = ({ value, onChange }) =>\n<Container>\n    <label className={q.contact}>\n        Find contacts by name <br/>\n        <input className={s.Input} value={value} type=\"text\" placeholder='Name or Surname' onChange={onChange} />\n    </label> \n</Container>;\n\nconst mapStateToProps = state => ({\n    value:contactsSelectors.getFilter(state) ,\n})\nconst mapDispatchToProps =dispatch=> ({\nonChange: event=>dispatch(contactsActions.changeFilter(event.target.value))\n})\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React, {Component} from 'react'\nimport PageHeading from '../../components/PageHeading';\nimport ContactList from '../../components/ContactList';\nimport s from '../../components/ContactList/ContactList.module.css';\nimport ContactForm from '../../components/ContactForm';\nimport {CSSTransition} from \"react-transition-group\";\nimport stylesHomePage from \"./HomePage.module.css\";\nimport Filter from '../../components/Filter ';\nimport StyleFilter from '../../components/Filter /Filter.module.css';\nimport { connect } from \"react-redux\";\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\n\nclass HomePage extends Component {\n\n  static defaultProps = {\n    //   \n  }\n  static propTypes = {\n   //\n  }\n  state = {\n    error: false,\n    message:'',\n  };\n\n  componentDidMount(){\n    this.props.fetchContacts();\n  };\n\n   handleSubmit = () => {\n         this.setState({error:true})\n    };\n  resetError=()=>{\n    this.setState({error:false})\n  };\n  \n  render() {\n    const { message} = this.state;\n    const { contacts } = this.props;\n    return (\n          <div >\n\n        \n          <CSSTransition classNames={stylesHomePage}  in={true} appear  timeout={500} unmountOnExit>\n          <PageHeading text=\"Phonebook\" />\n          </CSSTransition>\n          <ContactForm onSubmitContact={()=>{this.handleSubmit(message)}} onResetError={()=>{this.resetError()}}/>\n          <h2 className={s.contact}>Contacts</h2>\n          <CSSTransition classNames={StyleFilter} in={contacts >1}\n            timeout={250} unmountOnExit > \n          <Filter /> \n        </CSSTransition>\n        {this.props.isloadingContacts && <h1>Загружаем...</h1>}\n          <ContactList /> \n\n          </div>  \n    ) \n  }\n}\nconst mapStateToProps = (state) => ({\n  contacts:contactsSelectors.getTotalContactCount(state) ,\n  isloadingContacts:contactsSelectors.getLoading(state),\n \n});\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps) (HomePage);\n"],"sourceRoot":""}